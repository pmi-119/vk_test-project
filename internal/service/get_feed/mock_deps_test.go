// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go

// Package get_feed is a generated GoMock package.
package get_feed

import (
	model "VK_test_proect/internal/model"
	product_info "VK_test_proect/internal/repository/product_info"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockproductRepo is a mock of productRepo interface.
type MockproductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockproductRepoMockRecorder
}

// MockproductRepoMockRecorder is the mock recorder for MockproductRepo.
type MockproductRepoMockRecorder struct {
	mock *MockproductRepo
}

// NewMockproductRepo creates a new mock instance.
func NewMockproductRepo(ctrl *gomock.Controller) *MockproductRepo {
	mock := &MockproductRepo{ctrl: ctrl}
	mock.recorder = &MockproductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductRepo) EXPECT() *MockproductRepoMockRecorder {
	return m.recorder
}

// Select mocks base method.
func (m *MockproductRepo) Select(ctx context.Context, priceFilter *product_info.PriceFilter, sort product_info.Sorting, paging product_info.Paging) ([]model.ProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, priceFilter, sort, paging)
	ret0, _ := ret[0].([]model.ProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockproductRepoMockRecorder) Select(ctx, priceFilter, sort, paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockproductRepo)(nil).Select), ctx, priceFilter, sort, paging)
}
