// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go

// Package add_product is a generated GoMock package.
package add_product

import (
	model "VK_test_proect/internal/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockproductRepo is a mock of productRepo interface.
type MockproductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockproductRepoMockRecorder
}

// MockproductRepoMockRecorder is the mock recorder for MockproductRepo.
type MockproductRepoMockRecorder struct {
	mock *MockproductRepo
}

// NewMockproductRepo creates a new mock instance.
func NewMockproductRepo(ctrl *gomock.Controller) *MockproductRepo {
	mock := &MockproductRepo{ctrl: ctrl}
	mock.recorder = &MockproductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductRepo) EXPECT() *MockproductRepoMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockproductRepo) Save(ctx context.Context, product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockproductRepoMockRecorder) Save(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockproductRepo)(nil).Save), ctx, product)
}

// MockuserRepo is a mock of userRepo interface.
type MockuserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepoMockRecorder
}

// MockuserRepoMockRecorder is the mock recorder for MockuserRepo.
type MockuserRepoMockRecorder struct {
	mock *MockuserRepo
}

// NewMockuserRepo creates a new mock instance.
func NewMockuserRepo(ctrl *gomock.Controller) *MockuserRepo {
	mock := &MockuserRepo{ctrl: ctrl}
	mock.recorder = &MockuserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepo) EXPECT() *MockuserRepoMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockuserRepo) Exists(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockuserRepoMockRecorder) Exists(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockuserRepo)(nil).Exists), ctx, id)
}
